#!/bin/sh

# Author:     stablestud <adsorber@stablestud.org>
# Repository: https://github.com/stablestud/adsorber
# License:    MIT, https://opensource.org/licenses/MIT

# Variable naming:
# under_score        - used for global variables which are accessible between functions.
# _extra_under_score - used for local function variables. Should be unset afterwards.
#          (Note the underscore in the beginning of _extra_under_score!)

readonly tmp_dir_path="/tmp/adsorber"
readonly debug="false"


############[ DO NOT EDIT ]#####################################################
# NOTE: following values will be changed when installed with
# 'install-to-system.sh', if you want to change them, change them there
readonly executable_dir_path="$(cd "$(dirname "${0}")" && pwd)"
readonly library_dir_path="${executable_dir_path}/../lib/"
readonly shareable_dir_path="${executable_dir_path}/../share/"
readonly config_dir_path="${executable_dir_path}/../../"

############[ End of configuration, script begins now ]#########################

readonly version="0.4.0"
readonly operation="${1}"

if [ "${#}" -ne 0 ]; then
        shift
fi

readonly options="${*}"

checkRoot()
{
        # Changing the hosts file requires root rights!
        if [ "$(id -g)" -ne 0 ]; then
        	echo "$(id -un), I require way more more power then this! How about.. root ..? ;)" 1>&2
                exit 126
        fi

        return 0
}


checkForWrongParameters()
{
        if [ -n "${_wrong_operation}" ] || [ -n "${_wrong_option}" ]; then
                showUsage
        fi

        if [ "${_option_help}" = "true"  ]; then
                showSpecificHelp
        fi

        return 0
}


showUsage()
{
        if [ -n "${_wrong_operation}" ]; then
                echo "Adsorber: Invalid operation: '${_wrong_operation}'" 1>&2
        fi

        if [ -n "${_wrong_option}" ]; then
                echo "Adsorber: Invalid option: '${_wrong_option}'" 1>&2
        fi

        echo "Usage: adsorber <install|update|restore|revert|remove> [<options>]"
        echo "Try --help for more information."

        exit 80
}


showHelp()
{
        echo "Usage: adsorber <operation> [<options>]"
        echo ""
        echo "A(d)sorber blocks ads by 'absorbing' and dumbing them into void."
        echo "           (with the help of the hosts file)"
        echo ""
        echo "Operations:"
        echo "  install - setup necessary things needed for Adsorber"
        echo "              e.g., create backup file of hosts file,"
        echo "                    create scheduler which updates the host file once a week"
        echo "            However this should've be done automatically."
        echo "  update  - update hosts file with newest ad servers"
        echo "  restore - restore hosts file to its original state"
        echo "            (it does not remove the schedule, this should be used temporary)"
        echo "  revert  - reverts the hosts file to the lastest applied host file."
        echo "  remove  - completely remove changes made by Adsorber"
        echo "              e.g., remove scheduler (if set)"
        echo "                    restore hosts file to its original state"
        echo "  version - show version of this shell script"
        echo "  help    - show this help"
        echo ""
        echo "Options: (optional)"
        echo "  -s,  --systemd           - use Systemd ..."
        echo "  -c,  --cron              - use Cronjob as scheduler (use with 'install')"
        echo "  -ns, --no-scheduler      - skip scheduler creation (use with 'install')"
        echo "  -y,  --yes, --assume-yes - answer all prompts with 'yes'"
        echo "  -f,  --force             - force the update if no /etc/hosts backup"
        echo "                             has been created (dangerous)"
        echo "  -h,  --help              - show specific help of specified operations"
        echo
        echo "Documentation: https://github.com/stablestud/adsorber"
        echo "If you encounter any issues please report them to the Github repository."

        exit 0
}


showSpecificHelp()
{
        case "${operation}" in
                install )
                        printf "%badsorber install [<options>]%b:\\n" "${uwhite}" "${prefix_reset}"
                        echo
                        echo "You should run this command first."
                        echo
                        echo "The command will:"
                        echo " - backup your /etc/hosts file to /etc/hosts.original"
                        echo "   (if not other specified in adsorber.conf)"
                        echo " - install a scheduler which updates your hosts file with ad-server domains"
                        echo "   once a week. (either systemd, cronjob or none)"
                        echo " - install the newest ad-server domains in your hosts file."
                        echo
                        echo "Possible options:"
                        echo " -s,  --systemd            - use Systemd ..."
                        echo " -c,  --cronjob            - use Cronjob as scheduler"
                        echo " -ns, --no-scheduler       - skip scheduler creation"
                        echo " -y,  --yes, --assume-yes  - answer all prompts with 'yes'"
                        echo " -h,  --help               - show this help screen"
                        ;;
                update )
                        printf "%badsorber update [<options>]%b:\\n" "${uwhite}" "${prefix_reset}"
                        echo
                        echo "To keep the hosts file up-to-date."
                        echo
                        echo "The command will:"
                        echo " - install the newest ad-server domains in your hosts file."
                        echo
                        echo "Possible options:"
                        echo " -f, --force      - force the update if no /etc/hosts backup"
                        echo "                    has been created (dangerous)"
                        echo " -h, --help       - show this help screen"
                        ;;
                restore )
                        printf "%badsorber restore [<options>]%b:\\n" "${uwhite}" "${prefix_reset}"
                        echo
                        echo "To restore the hosts file temporary, without removing the backup."
                        echo
                        echo "The command will:"
                        echo " - copy /etc/hosts.original to /etc/hosts, overwriting the modified /etc/hosts by adsorber."
                        echo
                        echo "Important: If you have a scheduler installed it'll re-apply ad-server domains to your hosts"
                        echo "file when triggered."
                        echo "For this reason this command is used to temporary disable Adsorber."
                        echo "(e.g. when it's blocking some sites you need access for a short period of time)"
                        echo
                        echo "To re-apply run 'adsorber.sh update'"
                        echo
                        echo "Possible option:"
                        echo " -h, --help       - show this help screen"
                        ;;
                revert )
                        printf "%badsorber revert [<options>]%b:\\n" "${uwhite}" "${prefix_reset}"
                        echo
                        echo "To revert to the last hosts file, good use if the"
                        echo "current host file was corrupted."
                        echo
                        echo "The command will:"
                        echo " - copy /etc/hosts.previous to /etc/hosts, overwriting the current host file."
                        echo
                        echo "To get the latest ad-domains run 'adsorber.sh update'"
                        echo
                        echo "Possible option:"
                        echo " -h, --help       - show this help screen"
                        ;;
                remove )
                        printf "%badsorber remove [<options>]%b:\\n" "${uwhite}" "${prefix_reset}"
                        echo
                        echo "To completely remove changes made by Adsorber."
                        echo
                        echo "The command will:"
                        echo " - remove all schedulers (systemd, cronjob)"
                        echo " - restore the hosts file to it's original state"
                        echo " - remove all leftovers"
                        echo
                        echo "Possible options:"
                        echo " -y, --yes, --assume-yes  - answer all prompts with 'yes'"
                        echo " -h, --help               - show this help screen"
                        ;;
        esac

        exit 0
}


showVersion()
{
        echo "A(d)sorber ${version}"
        echo ""
        echo "  License MIT"
        echo "  Copyright (c) 2017 stablestud <adsorber@stablestud.org>"
        echo "  This is free software: you are free to change and redistribute it."
        echo "  There is NO WARRANTY, to the extent permitted by law."
        echo ""
        echo "Written by stablestud - and hopefully in the future with many others. ;)"
        echo "Repository: https://github.com/stablestud/adsorber"

        exit 0
}


duplicateOption()
{
        if [ "${1}" = "scheduler" ]; then
                echo "Adsorber: Duplicate option for scheduler: '${_option}'" 1>&2
                echo "You may only select one:"
                echo "  -s,  --systemd           - use Systemd ..."
                echo "  -c,  --cron              - use Cronjob as scheduler (use with 'install')"
                echo "  -ns, --no-scheduler      - skip scheduler creation (use with 'install')"
        else
                echo "Adsorber: Duplicate option: '${_option}'" 1>&2
                showUsage
        fi

        exit 80
}


sourceFiles()
{
        . "${library_dir_path}/install.sh"
        . "${library_dir_path}/remove.sh"
        . "${library_dir_path}/update.sh"
        . "${library_dir_path}/restore.sh"
        . "${library_dir_path}/revert.sh"
        . "${library_dir_path}/config.sh"
        . "${library_dir_path}/colours.sh"
        . "${library_dir_path}/cron/cron.sh"
        . "${library_dir_path}/systemd/systemd.sh"

        return 0
}


sourceFiles

for _option in "${@}"; do

        case "${_option}" in
                -[Ss] | --systemd )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="systemd"
                        else
                                duplicateOption "scheduler"
                        fi
                        ;;
                -[Cc] | --cron )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="cronjob"
                        else
                                duplicateOption "scheduler"
                        fi
                        ;;
                -[Nn][Ss] | --no-scheduler )
                        if [ -z "${reply_to_scheduler_prompt}" ]; then
                                readonly reply_to_scheduler_prompt="no-scheduler"
                        else
                                duplicateOption "scheduler"
                        fi
                        ;;
                -[Yy] | --[Yy][Ee][Ss] | --assume-yes )
                        if [ -z "${reply_to_prompt}" ]; then
                                readonly reply_to_prompt="yes"
                        else
                                duplicateOption
                        fi
                        ;;
                -[Ff] | --force )
                        if [ -z "${reply_to_force_prompt}" ]; then
                                readonly reply_to_force_prompt="yes"
                        else
                                duplicateOption
                        fi
                        ;;
                "" )
                        : # Do nothing
                        ;;
                -[Hh] | --help | help )
                        _option_help="true"
                        ;;
                * )
                        _wrong_option="${_option}" 2>/dev/null
                        ;;
        esac

done

case "${operation}" in
        install )
                checkForWrongParameters
                checkRoot
                config
                install
                update
                ;;
        remove )
                checkForWrongParameters
                checkRoot
                config
                remove
                ;;
        update )
                checkForWrongParameters
                checkRoot
                config
                update
                ;;
        restore )
                checkForWrongParameters
                checkRoot
                config
                restore
                ;;
        revert )
                checkForWrongParameters
                checkRoot
                config
                revert
                ;;
        -[Hh] | help | --help )
                showHelp
                ;;
        -[Vv] | version | --version )
                showVersion
                ;;
        "" )
                showUsage
                ;;
        * )
                readonly _wrong_operation="${operation}"
                showUsage
                ;;
esac

printf "%bFinished successfully.%b\\n" "${prefix_title}" "${prefix_reset}"

exit 0
